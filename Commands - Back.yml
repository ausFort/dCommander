dCommander_Command_Back:
  type: command
  debug: false
  name: back
  aliases:
  - tpback
  - teleportback
  - backteleport
  - backtp
  - goback
  - return
  usage: /back
  allowed help:
  - determine <player.has_permission[<script.yaml_key[permission]>]||<context.server>>
  description: Teleport you back to your last location.
  permission: dcommander.command.back
  script:
  - inject s@dCommander_Require_Ingame_Handler
  - define Locations <yaml[dCommander_<player.uuid>].read[back_locations]||li@>
  - if <def[Locations].is_empty> {
    - narrate format:dCommander_Format "You have not been teleported recently!"
    - queue clear
  }
  - define BackLoc <def[Locations].last>
  - flag <player> dCommander_Back
  - teleport <player> <def[BackLoc]>
  - yaml set back_locations:<-:<def[BackLoc]> id:dCommander_<player.uuid>
  - narrate format:dCommander_Format "You have been teleported back to <proc[dCPS]><proc[dCFL].context[<def[BackLoc].block>|true|true]><proc[dCPP]>."

dCommander_Back_Saves:
  type: world
  debug: false
  events:
    on player teleports:
    - if <player.has_flag[dCommander_Back]> {
      - flag <player> dCommander_Back:!
      - queue clear
    }
    - define Current <yaml[dCommander_<player.uuid>].read[back_locations]||li@>
    - if <def[Current].size> > <yaml[dCommander_Config].read[back.limit]> {
      - yaml set back_locations:<-:<def[Current].first> id:dCommander_<player.uuid>
    }
    - yaml set back_locations:->:<context.origin> id:dCommander_<player.uuid>
