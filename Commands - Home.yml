dcommander_Command_SetHome:
  type: command
  debug: false
  name: sethome
  usage: /sethome <&lt>home name<&gt>
  allowed help:
  - determine <player.has_permission[<script.yaml_key[permission]>]||<context.server>>
  description: Set a new home to your current location.
  permission: dcommander.command.sethome
  script:
  - inject s@dCommander_Require_Ingame_Handler
  - choose <context.args.size>:
    - case 1:
      - define Name <context.args.get[1]>
      - if <def[Name]> != <def[Name].escaped> {
        - narrate format:dCommander_Format "Plain text only, please."
        - queue clear
      }
      - define Max <proc[dCommander_Homes_Get_Max].context[<player>]>
      - if <def[Max]> != -1 && <proc[dCommander_Homes_Get].size> == <def[Max]> && <player.has_permission[dCommander.homes.unlimited].not> {
        - narrate format:dCommander_Format "You have reached your home limit of <proc[dCPS]><def[Max]><proc[dCPP]> homes."
      }
      - if <proc[dCommander_Homes_Get].contains[<def[Name]>]> {
        - narrate format:dCommander_Format "Overwriting existing home at <proc[dCFL].context[<proc[dCommander_Homes_Location].context[<player.uuid>|<def[Name]>]>|true|true|true]><proc[dCPP]>."
      }
      - yaml set homes.<def[Name]>:<player.location.block> id:dCommander_<player.uuid>
      - narrate format:dCommander_Format "New home <proc[dCPS]><def[Name].to_titlecase><proc[dCPP]> set at <proc[dCFL].context[<player.location.block>|true|true|true]><proc[dCPP]>."
    - default:
      - narrate format:dCommander_Format "Usage:<proc[dCPS]> <parse:<script.yaml_key[usage].split[ ].set[/<context.alias.to_lowercase>].at[1].space_separated>>"

dCommander_Command_DeleteHome:
  type: command
  debug: false
  name: delhome
  usage: /delhome <&lt>home name<&gt>
  allowed help:
  - determine <player.has_permission[<script.yaml_key[permission]>]||<context.server>>
  description: Deletes your home with the given name (if it exists).
  tab complete:
  - choose <context.args.size>:
    - case 0:
      - determine <proc[dCommander_Homes_Get]>
    - default:
      - determine <proc[dCommander_Homes_Get].filter[starts_with[<context.args.last>]]>
  permission: dcommander.command.delhome
  script:
  - choose <context.args.size>:
    - case 1:
      - define Name <context.args.get[1]>
      - if <def[Name]> != <def[Name].escaped> {
        - narrate format:dCommander_Format "Plain text only, please."
        - queue clear
      }
      - if <proc[dCommander_Homes_Get].contains[<def[Name]>].not> {
        - narrate format:dCommander_Format "You don't have a home by that name!"
        - queue clear
      }
      - narrate format:dCommander_Format "Removed home <proc[dCPS]><def[Name]><proc[dCPP]> from location <proc[dCFL].context[<proc[dCommander_Homes_Location].context[<player.uuid>|<def[Name]>]>|true|true|true]><proc[dCPP]>."
      - yaml set homes.<def[Name]>:! id:dCommander_<player.uuid>
    - default:
      - narrate format:dCommander_Format "Usage:<proc[dCPS]> <parse:<script.yaml_key[usage].split[ ].set[/<context.alias.to_lowercase>].at[1].space_separated>>"

dcommander_Command_Home:
  type: command
  debug: false
  name: home
  usage: /home <&lt>home name<&gt>
  allowed help:
  - determine <player.has_permission[<script.yaml_key[permission]>]||<context.server>>
  description: Go to one of your homes.
  tab complete:
  - choose <context.args.size>:
    - case 0:
      - determine <proc[dCommander_Homes_Get]>
    - default:
      - determine <proc[dCommander_Homes_Get].filter[starts_with[<context.args.last>]]>
  permission: dcommander.command.home
  script:
  - define Homes <proc[dCommander_Homes_Get]>
  - choose <context.args.size>:
    - case 0:
      - if <def[Homes].is_empty> {
        - narrate format:dCommander_Format "You currently have no homes set!"
        - queue clear
      }
      - narrate format:dCommander_Format "Your Homes:<proc[dCPS]> <def[Homes].separated_by[<proc[dCPP]>, <proc[dCPS]>]><proc[dCPP]>."
    - case 1:
      - define Name <context.args.get[1]>
      - if <def[Name]> != <def[Name].escaped> {
        - narrate format:dCommander_Format "Plain text only, please."
        - queue clear
      }
      - if <def[Homes].contains[<def[Name]>].not> {
        - narrate format:dCommander_Format "You don't have a home by that name!"
        - queue clear
      }
      - if <yaml[dCommander_Config].read[teleports.delay.home.enabled]||false> {
        - define Delay <yaml[dCommander_Config].read[teleports.delay.home.amount].as_int||3>
        - define Location <player.location.block>
        - narrate format:dCommander_Format "Moving will cancel your teleport."
        - repeat <def[Delay]> {
          - if <player.location.block> != <def[Location]> {
            - narrate format:dCommander_Format "Teleportation has been cancelled as you have moved!"
            - queue clear
          }
          - title "subtitle:<proc[dPC].context[You will be teleported in <proc[dCPS]><def[Delay].sub[<def[Value].sub[1]>]><proc[dCPP]> seconds.]>" fade_in:0 stay:1s fade_out:0.1s
          - wait 1s
        }
      }
      - teleport <player> <proc[dCommander_Homes_Location].context[<player.uuid>|<def[Name]>]>
      - narrate format:dCommander_Format "You've been teleported to your home <proc[dCPS]><def[Name].to_titlecase><proc[dCPP]>."
    - default:
      - narrate format:dCommander_Format "Usage:<proc[dCPS]> <parse:<script.yaml_key[usage].split[ ].set[/<context.alias.to_lowercase>].at[1].space_separated>>"

dCommander_Homes_Location:
  type: procedure
  debug: false
  definitions: UUID|HomeName
  script:
  - if <def[UUID].exists> && <def[HomeName].exists> {
    - if <def[UUID].is_player||false> {
      - define UUID <def[UUID].uuid>
    }
    - define UUID <def[UUID]||<player.uuid>>
    - if <yaml[dCommander_<def[UUID]>].contains[homes.<def[HomeName]>]> {
      - determine <yaml[dCommander_<def[UUID]>].read[homes.<def[HomeName]>]>
    }
  }
  - determine "Unknown Location"

dCommander_Homes_Get:
  type: procedure
  debug: false
  definitions: UUID
  script:
  - if <def[UUID].exists> {
    - if <def[UUID].is_player||false> {
      - define UUID <def[UUID].uuid>
    }
  }
  - define UUID <def[UUID]||<player.uuid>>
  - determine <yaml[dCommander_<def[UUID]>].list_keys[Homes].parse[to_titlecase]||li@>


dCommander_Homes_Get_Max:
  type: procedure
  debug: false
  definitions: Player
  script:
  - if <def[Player].exists.not> && <player.is_online||false> {
    - define Player <player>
  }
  - define Player <def[Player]||<player>>
  - define Maxes li@1
  - foreach <yaml[dCommander_Config].list_keys[homes.limit]||li@> {
    - if <def[Player].has_permission[dcommander.homes.limit.<def[Value]>]> {
      - define Maxes <def[Maxes].include[<yaml[dCommander_config].read[homes.limit.<def[Value]>]>]>
    }
  }
  - determine <def[Maxes].numerical.last>
