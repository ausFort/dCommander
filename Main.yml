dCommander_Initialise_Main:
  type: world
  debug: false
  events:
    on server start:
      - wait 3s
      - if <server.has_file[/dCommander/config.yml].not> {
        - inject locally initialise_config
      }
      else {
        - yaml load:/dCommander/config.yml fix_formatting id:dCommander_Config
      }
      - if <server.list_scripts.parse[Name].contains[dCommander_Command_Warp]> || <server.list_scripts.parse[name].contains[dCommander_Command_SetWarp]> {
        - if <server.has_file[/dCommander/warps.yml].not> {
          - yaml create id:dCommander_Warps
          - yaml savefile:/dCommander/warps.yml id:dCommander_Warps
          - announce to_console format:dCommander_Format "Generated warps file."
        }
        else {
          - yaml load:/dCommander/warps.yml fix_formatting id:dCommander_Warps
          - announce to_console format:dCommander_Format "Loaded warps file."
        }
        - run s@dCommander_Warps_Save delay:1m instantly
      }
      - wait 1t
      - announce to_console format:dCommander_Format "dCommander successfully loaded."
    on shutdown:
      - if <yaml.list.contains[dCommander_Config]> {
        - yaml savefile:/dCommander/config.yml id:dCommander_Config
      }
      - if <yaml.list.contains[dCommander_Warps]> {
        - yaml savefile:/dCommander/warps.yml id:dCommander_Warps
      }

  initialise_config:
    - yaml create id:dCommander_Config
    - yaml set colors.primary:&f id:dCommander_Config
    - yaml set colors.secondary:&6 id:dCommander_Config
    - yaml set "warps.per warp permissions:true" id:dCommander_Config
    - yaml set warps.delay.enabled:false id:dCommander_Config
    - yaml set warps.delay.amount:3 id:dCommander_Config
    - yaml savefile:/dCommander/config.yml id:dCommander_Config
    - announce to_console format:dCommander_Format "Generated new configuration."

dCommander_Format:
  type: format
  debug: false
  format: <proc[dPC].context[&7[<proc[dCPS]>dCommander&7]<proc[dCPP]> <text>]>

dPC:
  type: procedure
  debug: false
  definitions: M
  script:
  - determine <def[M].replace[regex:&([0-9a-fA-Fk-oK-OrR])].with[<red.substring[1,1]>$1]>

dCPP:
  type: procedure
  debug: false
  script:
  - determine <yaml[dCommander_Config].read[Colors.Primary]>

dCPS:
  type: procedure
  debug: false
  script:
  - determine <yaml[dCommander_Config].read[Colors.Secondary]>

dCommander_Require_Ingame_Handler:
  type: task
  debug: false
  script:
  - if <context.server> {
    - narrate format:dCommander_Format "You must be ingame to use this command!"
    - queue clear
  }

dCommander_Require_Player_Handler:
  type: task
  debug: false
  script:
  - if <context.server> {
    - narrate format:dCommander_Format "You must specify a player when in console!"
    - queue clear
  }
