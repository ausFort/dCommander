dCommander_Initialise_Main:
  type: world
  debug: false
  initialise_config:
    - yaml create id:dCommander_Config
    - yaml set colors.primary:&f id:dCommander_Config
    - yaml set colors.secondary:&6 id:dCommander_Config
    - yaml set "warps.per warp permissions:true" id:dCommander_Config
    - yaml set warps.delay.enabled:false id:dCommander_Config
    - yaml set warps.delay.amount:3 id:dCommander_Config
    - yaml set homes.limit.default:1 id:dCommander_Config
    - yaml set homes.limit.premium:3 id:dCommander_Config
    - yaml savefile:/dCommander/config.yml id:dCommander_Config
    - announce to_console format:dCommander_Format "Generated new configuration."
  events:
    on server start:
      - if <server.has_file[/dCommander/config.yml].not> {
        - inject locally initialise_config
      }
      else {
        - yaml load:/dCommander/config.yml fix_formatting id:dCommander_Config
      }
      - run s@dCommander_Players_Save delay:1m instantly
      - wait 3s
      - announce to_console format:dCommander_Format "dCommander successfully loaded."
    on shutdown:
      - if <yaml.list.contains[dCommander_Config]> {
        - yaml savefile:/dCommander/config.yml id:dCommander_Config
      }

dCommander_Initialise_Players:
  type: world
  debug: false
  events:
    on player join:
    - if <server.has_file[/dCommander/saves/<player.uuid>.yml].not> {
      - yaml create id:dCommander_<player.uuid>
    }
    else {
      - yaml load:/dCommander/saves/<player.uuid>.yml id:dCommander_<player.uuid>
    }
    - announce to_console format:dCommander_Format "Loaded save file for <proc[dCPS]><player.uuid><proc[dCPP]>."
    on player quit:
    - if <yaml.list.contains[dCommander_<player.uuid>]> {
      - yaml savefile:/dCommander/saves/<player.uuid>.yml id:dCommander_<player.uuid>
      - yaml unload id:dCommander_<player.uuid>
      - announce to_console format:dCommander_Format "Unloaded save file for <proc[dCPS]><player.uuid><proc[dCPP]>."
    }

dCommander_Players_Save:
  type: task
  debug: false
  script:
  - foreach <server.list_online_players> {
    - if <yaml.list.contains[dCommander_<def[Value].uuid>].not> {
      - yaml create id:dCommander_<def[Value].uuid>
    }
    - yaml savefile:/dCommander/saves/<def[Value].uuid>.yml id:dCommander_<def[Value].uuid>
  }
  - run <script> delay:1m instantly

dCSaves_Get:
  type: procedure
  debug: false
  definitions: UUID|Key
  script:
  - if <def[uuid].exists> && <def[key].exists> {
    - if <def[UUID].is_player||false> {
      - define UUID <def[UUID].uuid>
    }
    - if <yaml.list.contains[dCommander_<def[UUID]>]> {
      - if <yaml[dCommander_<def[UUID]>].contains[<def[Key]>]> {
        - determine <yaml[dCommander_<def[UUID]>].read[<def[Key]>]
      }
      - determine "nf"
    }
  }
  - determine "nl"


dCommander_Format:
  type: format
  debug: false
  format: <proc[dPC].context[&7[<proc[dCPS]>dCommander&7]<proc[dCPP]> <text>]>

dPC:
  type: procedure
  debug: false
  definitions: M
  script:
  - determine <def[M].replace[regex:&([0-9a-fA-Fk-oK-OrR])].with[<red.substring[1,1]>$1]>

dCPP:
  type: procedure
  debug: false
  script:
  - determine <yaml[dCommander_Config].read[Colors.Primary]>

dCPS:
  type: procedure
  debug: false
  script:
  - determine <yaml[dCommander_Config].read[Colors.Secondary]>

dCommander_Require_Ingame_Handler:
  type: task
  debug: false
  script:
  - if <context.server> {
    - narrate format:dCommander_Format "You must be ingame to use this command!"
    - queue clear
  }

dCommander_Require_Player_Handler:
  type: task
  debug: false
  script:
  - if <context.server> {
    - narrate format:dCommander_Format "You must specify a player when in console!"
    - queue clear
  }
